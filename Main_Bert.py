{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Load Huggingface transformers\nfrom transformers import TFBertModel,  BertConfig, BertTokenizerFast, TFAutoModel\n\n# Then what you need from tensorflow.keras\nfrom tensorflow.keras.layers import Input, Dropout, Dense, GlobalAveragePooling1D\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.initializers import TruncatedNormal\nfrom tensorflow.keras.losses import CategoricalCrossentropy\nfrom tensorflow.keras.metrics import CategoricalAccuracy\nfrom tensorflow.keras.utils import to_categorical\n\n# And pandas for data import + sklearn because you allways need sklearn\nimport pandas as pd\nimport tensorflow as tf\nimport re\nimport numpy as np\nfrom sklearn.model_selection import train_test_split","metadata":{"execution":{"iopub.status.busy":"2021-09-03T06:39:28.427498Z","iopub.execute_input":"2021-09-03T06:39:28.427884Z","iopub.status.idle":"2021-09-03T06:39:35.295609Z","shell.execute_reply.started":"2021-09-03T06:39:28.427802Z","shell.execute_reply":"2021-09-03T06:39:35.294682Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!unzip ../input/jigsaw-toxic-comment-classification-challenge/train.csv.zip\n!unzip ../input/jigsaw-toxic-comment-classification-challenge/test.csv.zip","metadata":{"execution":{"iopub.status.busy":"2021-09-03T06:40:23.601077Z","iopub.execute_input":"2021-09-03T06:40:23.601427Z","iopub.status.idle":"2021-09-03T06:40:26.644174Z","shell.execute_reply.started":"2021-09-03T06:40:23.601396Z","shell.execute_reply":"2021-09-03T06:40:26.643193Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df=pd.read_csv('train.csv')\n\ndf = df.sample(frac=1)","metadata":{"execution":{"iopub.status.busy":"2021-09-03T06:40:26.645923Z","iopub.execute_input":"2021-09-03T06:40:26.646288Z","iopub.status.idle":"2021-09-03T06:40:27.532988Z","shell.execute_reply.started":"2021-09-03T06:40:26.646232Z","shell.execute_reply":"2021-09-03T06:40:27.532052Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2021-09-03T06:40:27.534664Z","iopub.execute_input":"2021-09-03T06:40:27.534968Z","iopub.status.idle":"2021-09-03T06:40:27.559963Z","shell.execute_reply.started":"2021-09-03T06:40:27.534934Z","shell.execute_reply":"2021-09-03T06:40:27.559056Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def clean_text(text):\n    text = text.lower()\n    text = re.sub(r\"what's\", \"what is \", text)\n    text = re.sub(r\"\\'s\", \" \", text)\n    text = re.sub(r\"\\'ve\", \" have \", text)\n    text = re.sub(r\"can't\", \"cannot \", text)\n    text = re.sub(r\"n't\", \" not \", text)\n    text = re.sub(r\"i'm\", \"i am \", text)\n    text = re.sub(r\"\\'re\", \" are \", text)\n    text = re.sub(r\"\\'d\", \" would \", text)\n    text = re.sub(r\"\\'ll\", \" will \", text)\n    text = re.sub(r\"\\'scuse\", \" excuse \", text)\n    text = re.sub('\\W', ' ', text)\n    text = re.sub('\\s+', ' ', text)\n    text = text.strip(' ')\n    return text","metadata":{"execution":{"iopub.status.busy":"2021-09-03T06:40:28.093852Z","iopub.execute_input":"2021-09-03T06:40:28.094177Z","iopub.status.idle":"2021-09-03T06:40:28.101234Z","shell.execute_reply.started":"2021-09-03T06:40:28.094148Z","shell.execute_reply":"2021-09-03T06:40:28.100291Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['comment_text'] = df['comment_text'].map(lambda x : clean_text(x))","metadata":{"execution":{"iopub.status.busy":"2021-09-03T06:40:29.992031Z","iopub.execute_input":"2021-09-03T06:40:29.992399Z","iopub.status.idle":"2021-09-03T06:40:42.571652Z","shell.execute_reply.started":"2021-09-03T06:40:29.992355Z","shell.execute_reply":"2021-09-03T06:40:42.570752Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_sentences = df[\"comment_text\"].fillna(\"CVxTz\").values\nlist_classes = [\"toxic\", \"severe_toxic\", \"obscene\", \"threat\", \"insult\", \"identity_hate\"]\ntrain_y = df[list_classes].values","metadata":{"execution":{"iopub.status.busy":"2021-09-03T06:40:42.572982Z","iopub.execute_input":"2021-09-03T06:40:42.573313Z","iopub.status.idle":"2021-09-03T06:40:42.602675Z","shell.execute_reply.started":"2021-09-03T06:40:42.573262Z","shell.execute_reply":"2021-09-03T06:40:42.601783Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2021-09-03T06:40:42.60558Z","iopub.execute_input":"2021-09-03T06:40:42.605931Z","iopub.status.idle":"2021-09-03T06:40:42.619542Z","shell.execute_reply.started":"2021-09-03T06:40:42.605897Z","shell.execute_reply":"2021-09-03T06:40:42.618623Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Name of the BERT model to use\nmodel_name = 'bert-base-uncased'\n\n# Max length of tokens\nmax_length = 128\n\n# Load transformers config and set output_hidden_states to False\nconfig = BertConfig.from_pretrained(model_name)\n#config.output_hidden_states = False\n\n# Load BERT tokenizer\ntokenizer = BertTokenizerFast.from_pretrained(pretrained_model_name_or_path = model_name, config = config)\nbert = TFAutoModel.from_pretrained(model_name)","metadata":{"execution":{"iopub.status.busy":"2021-09-03T06:41:56.787013Z","iopub.execute_input":"2021-09-03T06:41:56.787372Z","iopub.status.idle":"2021-09-03T06:42:26.724167Z","shell.execute_reply.started":"2021-09-03T06:41:56.78734Z","shell.execute_reply":"2021-09-03T06:42:26.723258Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"input_ids = Input(shape=(max_length,), name='input_ids', dtype='int32')\nattention_mask = Input(shape=(max_length,), name='attention_mask', dtype='int32') \ninputs = {'input_ids': input_ids, 'attention_mask': attention_mask}\nx = bert.bert(inputs)","metadata":{"execution":{"iopub.status.busy":"2021-09-03T06:42:26.725885Z","iopub.execute_input":"2021-09-03T06:42:26.726454Z","iopub.status.idle":"2021-09-03T06:42:31.196128Z","shell.execute_reply.started":"2021-09-03T06:42:26.726415Z","shell.execute_reply":"2021-09-03T06:42:31.195211Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x","metadata":{"execution":{"iopub.status.busy":"2021-09-03T06:31:32.576672Z","iopub.execute_input":"2021-09-03T06:31:32.576998Z","iopub.status.idle":"2021-09-03T06:31:32.583775Z","shell.execute_reply.started":"2021-09-03T06:31:32.576967Z","shell.execute_reply":"2021-09-03T06:31:32.582781Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#x2 =Dense(512, activation='relu')(x[1])\nx2 = GlobalAveragePooling1D()(x[0])\n#x3 = Dropout(0.5)(x2)\ny =Dense(len(list_classes), activation='sigmoid', name='outputs')(x2)\n\nmodel = Model(inputs=inputs, outputs=y)\n#model.layers[2].trainable = False\n\n# Take a look at the model\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2021-09-03T06:42:53.212177Z","iopub.execute_input":"2021-09-03T06:42:53.212684Z","iopub.status.idle":"2021-09-03T06:42:53.263293Z","shell.execute_reply.started":"2021-09-03T06:42:53.212646Z","shell.execute_reply":"2021-09-03T06:42:53.262506Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"optimizer = Adam(lr=1e-5, decay=1e-6)\nmodel.compile(loss='binary_crossentropy',\n                  optimizer=optimizer,\n                  metrics=['accuracy'])","metadata":{"execution":{"iopub.status.busy":"2021-09-03T06:45:12.630973Z","iopub.execute_input":"2021-09-03T06:45:12.631346Z","iopub.status.idle":"2021-09-03T06:45:12.651626Z","shell.execute_reply.started":"2021-09-03T06:45:12.631313Z","shell.execute_reply":"2021-09-03T06:45:12.650738Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Tokenize the input \nx = tokenizer(\n    text=list(train_sentences),\n    add_special_tokens=True,\n    max_length=max_length,\n    truncation=True,\n    padding=True, \n    return_tensors='tf',\n    return_token_type_ids = False,\n    return_attention_mask = True,\n    verbose = True)\n","metadata":{"execution":{"iopub.status.busy":"2021-09-03T06:45:15.533989Z","iopub.execute_input":"2021-09-03T06:45:15.534344Z","iopub.status.idle":"2021-09-03T06:45:54.749497Z","shell.execute_reply.started":"2021-09-03T06:45:15.534313Z","shell.execute_reply":"2021-09-03T06:45:54.748573Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history = model.fit(\n    x={'input_ids': x['input_ids'], 'attention_mask': x['attention_mask']},\n    #x={'input_ids': x['input_ids']},\n    y={'outputs': train_y},\n    validation_split=0.1,\n    batch_size=32,\n    epochs=1)","metadata":{"execution":{"iopub.status.busy":"2021-09-03T06:45:54.750916Z","iopub.execute_input":"2021-09-03T06:45:54.751251Z","iopub.status.idle":"2021-09-03T07:22:24.080812Z","shell.execute_reply.started":"2021-09-03T06:45:54.751215Z","shell.execute_reply":"2021-09-03T07:22:24.079967Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_df=pd.read_csv(\"test.csv\")\ntest_df['comment_text']=test_df['comment_text'].map(lambda x : clean_text(x))\ntest_sentences = test_df[\"comment_text\"].fillna(\"CVxTz\").values","metadata":{"execution":{"iopub.status.busy":"2021-09-03T07:22:45.174842Z","iopub.execute_input":"2021-09-03T07:22:45.175181Z","iopub.status.idle":"2021-09-03T07:22:57.283863Z","shell.execute_reply.started":"2021-09-03T07:22:45.175149Z","shell.execute_reply":"2021-09-03T07:22:57.282987Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_x = tokenizer(\n    text=list(test_sentences),\n    add_special_tokens=True,\n    max_length=max_length,\n    truncation=True,\n    padding=True, \n    return_tensors='tf',\n    return_token_type_ids = False,\n    return_attention_mask = True,\n    verbose = True)","metadata":{"execution":{"iopub.status.busy":"2021-09-03T07:22:57.285423Z","iopub.execute_input":"2021-09-03T07:22:57.285768Z","iopub.status.idle":"2021-09-03T07:23:33.034983Z","shell.execute_reply.started":"2021-09-03T07:22:57.285733Z","shell.execute_reply":"2021-09-03T07:23:33.034093Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"del test_sentences\ndel x\ndel df","metadata":{"execution":{"iopub.status.busy":"2021-09-03T07:23:33.03734Z","iopub.execute_input":"2021-09-03T07:23:33.037678Z","iopub.status.idle":"2021-09-03T07:23:34.301662Z","shell.execute_reply.started":"2021-09-03T07:23:33.037645Z","shell.execute_reply":"2021-09-03T07:23:34.299497Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import gc\ngc.collect()","metadata":{"execution":{"iopub.status.busy":"2021-09-03T07:23:34.303314Z","iopub.execute_input":"2021-09-03T07:23:34.303711Z","iopub.status.idle":"2021-09-03T07:23:34.553147Z","shell.execute_reply.started":"2021-09-03T07:23:34.303662Z","shell.execute_reply":"2021-09-03T07:23:34.552283Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_x","metadata":{"execution":{"iopub.status.busy":"2021-09-03T07:23:34.554746Z","iopub.execute_input":"2021-09-03T07:23:34.555357Z","iopub.status.idle":"2021-09-03T07:23:34.569373Z","shell.execute_reply.started":"2021-09-03T07:23:34.555311Z","shell.execute_reply":"2021-09-03T07:23:34.568544Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions=model.predict(x={'input_ids': test_x['input_ids'], 'attention_mask': test_x['attention_mask']},batch_size=32)","metadata":{"execution":{"iopub.status.busy":"2021-09-03T07:23:34.570659Z","iopub.execute_input":"2021-09-03T07:23:34.571021Z","iopub.status.idle":"2021-09-03T07:36:17.039007Z","shell.execute_reply.started":"2021-09-03T07:23:34.570977Z","shell.execute_reply":"2021-09-03T07:36:17.038076Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions","metadata":{"execution":{"iopub.status.busy":"2021-09-03T07:36:52.858151Z","iopub.execute_input":"2021-09-03T07:36:52.858525Z","iopub.status.idle":"2021-09-03T07:36:52.865317Z","shell.execute_reply.started":"2021-09-03T07:36:52.858487Z","shell.execute_reply":"2021-09-03T07:36:52.864295Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission=pd.DataFrame(predictions,columns=list_classes)\nsubmission['id'] = test_df['id']\nsubmission=submission[['id']+(list_classes)]\nsubmission.to_csv(\"submission.csv\", index=False)","metadata":{"execution":{"iopub.status.busy":"2021-09-03T07:37:04.092956Z","iopub.execute_input":"2021-09-03T07:37:04.09328Z","iopub.status.idle":"2021-09-03T07:37:05.524104Z","shell.execute_reply.started":"2021-09-03T07:37:04.093239Z","shell.execute_reply":"2021-09-03T07:37:05.523291Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission","metadata":{"execution":{"iopub.status.busy":"2021-09-03T07:37:10.173743Z","iopub.execute_input":"2021-09-03T07:37:10.174066Z","iopub.status.idle":"2021-09-03T07:37:10.192606Z","shell.execute_reply.started":"2021-09-03T07:37:10.174035Z","shell.execute_reply":"2021-09-03T07:37:10.191666Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!ls","metadata":{"execution":{"iopub.status.busy":"2021-09-03T07:42:33.336242Z","iopub.execute_input":"2021-09-03T07:42:33.336657Z","iopub.status.idle":"2021-09-03T07:42:34.153284Z","shell.execute_reply.started":"2021-09-03T07:42:33.336624Z","shell.execute_reply":"2021-09-03T07:42:34.152198Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}